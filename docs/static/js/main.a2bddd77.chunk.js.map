{"version":3,"sources":["Components/LocalDb.js","Components/Header.js","cancel.svg","Components/Card.js","plus.svg","Components/AddCardIcon.js","Components/Column.js","reminders.svg","Components/AddListIcon.js","Components/GridColumn.js","App.js","reportWebVitals.js","index.js"],"names":["db","Header","props","className","Card","useState","title","setTitle","text","setText","buttonText","setButtonText","deleteCard","addCard","id","src","cross","alt","width","height","onClick","type","placeholder","value","onChange","e","target","rows","cols","length","preventDefault","alert","AddCardIcon","style","PlusLogo","idb","InitDB","dbName","ver","dbObject","window","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","Promise","resolve","reject","version","localStorage","getItem","request","open","parseInt","onerror","console","log","onsuccess","result","setItem","createListStore","ObjectStoreName","isAutoIncrement","curVer","close","onupgradeneeded","createObjectStore","autoIncrement","keyPath","deleteList","objectStoreNames","contains","Error","deleteObjectStore","dataObject","primaryKey","valueKey","tx","transaction","store","objectStore","add","oncomplete","error","updateCard","appendObj","appendKey","req","get","event","data","finalData","temp","Object","assign","requestUpdate","put","getAllCards","getAll","delete","readAllLists","init","a","Column","cards","cardDetails","setCardDetails","addNewCard","curId","toString","saveCard","parentElement","parentId","Db","create_tm","Date","getTime","cardIndex","forEach","card","index","cardId","newCards","filter","sortedCards","sort","b","map","buttonTitle","AddListIcon","marginLeft","marginTop","GridColumn","columns","setColumns","load","colId","setColId","columnId","idCounter","appendNewList","push","newCols","col","useEffect","dbVer","listCounter","list","listArr","finalListObj","listCardObj","listName","readEntireDb","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6HACIA,E,8ECYWC,EAVA,SAACC,GACd,OACE,sBAAKC,UAAU,SAAf,UACE,uBACA,8CACA,2B,cCRS,MAA0B,mCC4D1BC,EAzDF,SAACF,GACZ,MAA0BG,mBAASH,EAAMI,OAAS,IAAlD,mBAAOA,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAASH,EAAMM,MAAQ,IAA/C,mBAAOA,EAAP,KAAaC,EAAb,KACA,EAAoCJ,mBAASH,EAAMQ,YAAc,IAAjE,mBAAOA,EAAP,KAAmBC,EAAnB,KACQC,EAAwBV,EAAxBU,WAAYC,EAAYX,EAAZW,QAWpB,OACE,sBAAKV,UAAU,OAAOW,GAAIZ,EAAMY,GAAhC,UACE,qBACEX,UAAU,QACVY,IAAKC,EACLC,IAAI,QACJC,MAAM,KACNC,OAAO,KACPC,QAASR,IAEX,uBACES,KAAK,OACLP,GAAE,gBAAWZ,EAAMY,IACnBQ,YAAY,QACZC,MAAOjB,EACPkB,SAzBsB,SAACC,GAC3BlB,EAASkB,EAAEC,OAAOH,UA0BhB,0BACED,YAAY,gBACZR,GAAE,eAAUZ,EAAMY,IAClBa,KAAM,EACNC,KAAM,GACNL,MAAOf,EACPgB,SA9BqB,SAACC,GAC1BhB,EAAQgB,EAAEC,OAAOH,UA+Bf,wBACEH,QAAS,SAACK,GA7BO,IAAjBnB,EAAMuB,QA+BFJ,EAAEK,iBACFC,MAAM,gCAENpB,EAAc,UACdE,EAAQY,EAAGnB,EAAOE,EAAME,KAP9B,SAWGA,GAAc,aCtDR,MAA0B,iCCmB1BsB,EAhBK,SAAC9B,GACnB,IAAQW,EAAYX,EAAZW,QACR,OACE,qBAAKV,UAAU,cAAf,SACE,qBACE8B,MAAO,CAAE,WAAc,OACvBlB,IAAKmB,EACLjB,IAAI,WACJC,MAAM,KACNC,OAAO,MACPC,QAASP,O,QL+KFsB,EAzLH,CACVC,OADU,SACHC,EAAQC,GACb,IAAMC,EACJC,OAAOC,WACPD,OAAOE,cACPF,OAAOG,iBACPH,OAAOI,YAET,OAAO,IAAIC,SAAQ,SAAUC,EAASC,GACpC,IAAIC,EAAUV,EACuB,MAAjCW,aAAaC,QAAQ,WACvBF,EAAUC,aAAaC,QAAQ,UAEjC,IAAMC,EAAUZ,EAASa,KAAKf,EAAQgB,SAASL,EAAS,KACxDG,EAAQG,QAAU,SAAC7B,GACjB8B,QAAQC,IAAR,iCAAsC/B,IACtCsB,EAAOtB,IAET0B,EAAQM,UAAY,SAAChC,GACnBzB,EAAKmD,EAAQO,OACbT,aAAaU,QAAQ,QAASX,GAC9BO,QAAQC,IAAR,yCAA8C/B,IAC9CqB,SAINc,gBA1BU,SA0BMvB,EAAQwB,GAA0C,IAAzBC,IAAwB,yDACzDvB,EACJC,OAAOC,WACPD,OAAOE,cACPF,OAAOG,iBACPH,OAAOI,YACHmB,EAASd,aAAaC,QAAQ,SACpC,OAAO,IAAIL,SAAQ,SAAUC,EAASC,GAChC/C,GAAIA,EAAGgE,QACX,IAAMb,EAAUZ,EAASa,KAAKf,EAAQgB,SAASU,EAAQ,IAAM,GAC7DZ,EAAQG,QAAU,SAAC7B,GACjBwB,aAAaU,QAAQ,QAAS3D,EAAGgD,SACjCO,QAAQC,IAAI/B,IAEd0B,EAAQM,UAAY,SAAChC,GACnBzB,EAAKmD,EAAQO,OACbT,aAAaU,QAAQ,QAAS3D,EAAGgD,SACjCF,GAAQ,IAEVK,EAAQc,gBAAkB,SAACxC,GACzBzB,EAAKyB,EAAEC,OAAOgC,QACU,IAApBI,EACF9D,EAAGkE,kBAAkBL,EAAiB,CAAEM,eAAe,IAEvDnE,EAAGkE,kBAAkBL,EAAiB,CAAEO,QAAS,OAGnDnB,aAAaU,QAAQ,QAAS3D,EAAGgD,SACjCF,SAINuB,WA1DU,SA0DChC,EAAQwB,GACjB,IAAMtB,EACJC,OAAOC,WACPD,OAAOE,cACPF,OAAOG,iBACPH,OAAOI,YACHmB,EAASd,aAAaC,QAAQ,SACpC,OAAO,IAAIL,SAAQ,SAAUC,EAASC,IACkB,IAAlD/C,EAAGsE,iBAAiBC,SAASV,IAC/Bd,EAAO,IAAIyB,MAAM,+BACnBxE,EAAGgE,QACH,IAAMb,EAAUZ,EAASa,KAAKf,EAAQgB,SAASU,EAAQ,IAAM,GAC7DZ,EAAQG,QAAU,SAAC7B,GACjBwB,aAAaU,QAAQ,QAASN,SAASU,EAAQ,IAAM,GACrDhB,EAAO,IAAIyB,MAAM/C,IACjB8B,QAAQC,IAAI/B,IAEd0B,EAAQM,UAAY,SAAChC,GACnBzB,EAAKmD,EAAQO,OACbT,aAAaU,QAAQ,QAASN,SAASU,EAAQ,IAAM,GACrDjB,GAAQ,IAEVK,EAAQc,gBAAkB,SAACxC,GACzB8B,QAAQC,IAAI,qBACZxD,EAAKyB,EAAEC,OAAOgC,QAEXe,kBAAkBZ,GACrBf,SAINjC,QAzFU,SAyFFgD,EAAiBa,GAAiD,IAArCC,EAAoC,uDAAvB,GAAIC,EAAmB,uDAAR,OAC/D,OAAO,IAAI/B,SAAQ,SAAUC,EAASC,GACpC,GAAI/C,EAAGsE,iBAAiBC,SAASV,GAC/B,IACE,IAAMgB,EAAK7E,EAAG8E,YAAYjB,EAAiB,aACrCkB,EAAQF,EAAGG,YAAYnB,GACV,KAAfc,EACFI,EAAME,IAAN,eAAaL,EAAWF,IAExBK,EAAME,IAAN,aAAYnE,GAAI6D,GAAaC,EAAWF,IAE1CG,EAAGK,WAAa,WACd3B,QAAQC,IAAI,gCACZV,KAEF,MAAOqC,GACP5B,QAAQC,IAAI,8BAAgC2B,GAC5CpC,EAAOoC,QAGT5B,QAAQC,IAAI,6BACZT,EAAO,iCAIbqC,WAlHU,SAkHCvB,EAAiBc,EAAYU,GAA4B,IAAjBC,EAAgB,uDAAJ,GAC7D,OAAO,IAAIzC,SAAQ,SAAUC,EAASC,GACpC,IACMiC,EADchF,EAAG8E,YAAYjB,EAAiB,aACpBmB,YAAYnB,GACtC0B,EAAMP,EAAYQ,IAAIb,GAC5BY,EAAI9B,UAAY,SAAUgC,GACxB,IACE,IAAMC,EAAOD,EAAM/D,OAAOgC,OACtBiC,EAAY,GAEhB,GAAiB,IAAbL,EAAiB,CAEnB,IAAIM,EAAOC,OAAOC,OAAOJ,EAAKA,KAAML,GACpCM,EAAU7E,GAAK4E,EAAK5E,GACpB6E,EAAUD,KAAOE,OAIjBF,EADkBJ,GACMD,EAE1B,IAAMU,EAAgBf,EAAYgB,IAAIL,GACtCI,EAActC,UAAY,SAAChC,GACzB8B,QAAQC,IAAR,6BAAkC/B,IAClCqB,KAEFiD,EAAczC,QAAU,SAAC7B,GACvB8B,QAAQC,IAAR,0BAA+B/B,IAC/BsB,EAAOtB,IAET,MAAO0D,GACP5B,QAAQC,IAAI,8BAAgC2B,GAC5CpC,EAAOoC,KAGXI,EAAIjC,QAAU,SAAU7B,GACtB8B,QAAQC,IAAI,8BAAgC/B,QAIlDwE,YAzJU,SAyJEpC,GACV,OAAO,IAAIhB,SAAQ,SAAUC,EAASC,GACzB/C,EAAG8E,YAAYjB,GACImB,YAAYnB,GACXqC,SAC3BzC,UAAY,SAAUgC,GACxB,IACE,IAAMC,EAAOD,EAAM/D,OAAOgC,OAC1BZ,EAAQ4C,GACR,MAAOP,GACP5B,QAAQC,IAAI,4BAA8B2B,SAKlDvE,WAxKU,SAwKCiD,EAAiBc,GAC1B,OAAO,IAAI9B,SAAQ,SAAUC,GAC3B,IAAM+B,EAAK7E,EAAG8E,YAAYjB,EAAiB,aAC7BgB,EAAGG,YAAYnB,GAAiBsC,OAAOxB,GACrDE,EAAGK,WAAa,SAACzD,GACf8B,QAAQC,IAAR,+BAAoC/B,IACpCqB,SAINsD,aAlLU,SAkLGC,EAAMhE,EAAQC,GACzB,OAAO,IAAIO,QAAJ,uCAAY,WAAgBC,EAASC,GAAzB,SAAAuD,EAAA,sEACXD,EAAKhE,EAAQC,GADF,OAEjBQ,EAAQ9C,EAAGsE,kBAFM,2CAAZ,2DM/FIiC,EAhFA,SAACrG,GAEd,MAAsCG,mBAASH,EAAMsG,OAAS,IAA9D,mBAAOC,EAAP,KAAoBC,EAApB,KAKMC,EAAU,uCAAG,WAAOlF,GAAP,eAAA6E,EAAA,sDACXM,EAAQH,EAAY5E,OAAS,EACnC6E,EAAe,GAAD,mBAAKD,GAAL,CAAkB,CAAE3F,GAAI8F,EAAMC,eAF3B,2CAAH,sDAKVC,EAAQ,uCAAG,WAAOrF,EAAGnB,EAAOE,EAAME,GAAvB,mBAAA4F,EAAA,yDACTM,EAAQnF,EAAEC,OAAOqF,cAAcjG,GAC/BkG,EAAWvF,EAAEC,OAAOqF,cAAcA,cAAcA,cAAcjG,GACjD,WAAfJ,EAHW,gCAIPuG,EAAG7B,WAAW4B,EAAUJ,EAAMC,WAAY,CAC9CvG,MAAOA,EACPE,KAAMA,IANK,6CASPyG,EAAGpG,QACPmG,EACA,CAAE1G,MAAOA,EAAOE,KAAMA,EAAM0G,WAAW,IAAIC,MAAOC,WAClDR,EAAMC,YAZK,OAcXQ,GAAa,EACjBZ,EAAYa,SAAQ,SAACC,EAAMC,GACrBD,EAAKzG,IAAM8F,EAAMC,aAAYQ,EAAYG,MAE3CH,GAAa,IACfZ,EAAYY,GAAa,CACvBvG,GAAI8F,EAAMC,WACVnB,KAAM,CACJpF,MAAOA,EACPE,KAAMA,EACN0G,WAAW,IAAIC,MAAOC,aAI5BV,EAAeD,GA5BA,4CAAH,4DA+BR7F,EAAU,uCAAG,WAAOa,GAAP,qBAAA6E,EAAA,6DACXU,EAAWvF,EAAEC,OAAOqF,cAAcA,cAAcA,cAAcjG,GAC9D2G,EAAShG,EAAEC,OAAOqF,cAAcjG,GAChC4G,EAAWjB,EAAYkB,QAAO,SAACJ,GAEnC,OADAhE,QAAQC,IAAI+D,EAAKzG,GAAI2G,GACdF,EAAKzG,IAAM2G,KAEdG,EAAcF,EAASG,MAAK,SAACvB,EAAGwB,GAAO,IAAD,IAC1C,OAAQ,OAADA,QAAC,IAADA,GAAA,UAAAA,EAAGpC,YAAH,eAASwB,YAAT,OAAqBZ,QAArB,IAAqBA,GAArB,UAAqBA,EAAGZ,YAAxB,aAAqB,EAASwB,cAEvCR,EAAekB,GAVE,SAWXX,EAAGrG,WAAWoG,EAAUS,GAXb,2CAAH,sDAchB,OACE,sBAAKtH,UAAU,SAAf,UACGsG,EAAYsB,KAAI,SAACR,GAAU,IAAD,QACnBzG,EAAKyG,EAAKzG,GACZkH,EAAc,OAElB,OADQ,OAAJT,QAAI,IAAJA,GAAA,UAAAA,EAAM7B,YAAN,mBAAYpF,aAAZ,eAAmBuB,QAAS,IAAGmG,EAAc,UAE/C,cAAC,EAAD,CACElH,GAAIA,EACJF,WAAYA,EAEZC,QAASiG,EACTxG,MAAK,OAAEiH,QAAF,IAAEA,GAAF,UAAEA,EAAM7B,YAAR,aAAE,EAAYpF,MACnBE,KAAI,OAAE+G,QAAF,IAAEA,GAAF,UAAEA,EAAM7B,YAAR,aAAE,EAAYlF,KAClBE,WAAYsH,GAJPlH,MAQX,cAAC,EAAD,CAAaD,QAAS8F,QClFb,MAA0B,sCCoB1BsB,EAhBK,SAAC/H,GACnB,IAAQ+E,EAAQ/E,EAAR+E,IACR,OACE,8BACE,qBACEhD,MAAO,CAAEiG,WAAY,MAAOC,UAAW,OACvCpH,IAAKmB,EACLjB,IAAI,WACJC,MAAM,MACNC,OAAO,KACPC,QAAS6D,OC+EFmD,EArFI,WACjB,MAA8B/H,mBAAS,IAAvC,mBAAOgI,EAAP,KAAgBC,EAAhB,KACA,EAAwBjI,mBAAS,GAAjC,mBAAOkI,EAAP,KACA,GADA,KAC0BlI,mBAAS,IAAnC,mBAAOmI,EAAP,KAAcC,EAAd,KACMC,EAAW,GACbC,EAAYH,EACVnG,EAAS,SAETuG,EAAa,uCAAG,sBAAAtC,EAAA,6DACpBqC,EAAYH,EAAQ,EACpBF,EAAW,GAAD,mBAAKD,GAAL,CAAc,CAAEvH,GAAI6H,MAC9BD,EAASG,KAAKF,GAHM,SAId1B,EAAGrD,gBAAgBvB,EAAQsG,GAAW,GAJxB,OAKpBF,EAASE,EAAY,GACrB1F,aAAaU,QAAQ,cAAeN,SAASsF,EAAW,IAAM,GAN1C,2CAAH,qDASbtE,EAAU,uCAAG,WAAO5C,GAAP,iBAAA6E,EAAA,6DACXoC,EAAWjH,EAAEC,OAAOqF,cAAcjG,GAKlCgI,EAAUT,EAAQV,QAAO,SAACoB,GAAD,OAASA,EAAIjI,IAAM4H,KAKlDJ,EAAWQ,GAXM,SAaX7B,EAAG5C,WAAWhC,EAAQqG,GAbX,2CAAH,sDA2ChB,OA5BAM,qBAAU,WACR,IAAMC,EAAQhG,aAAaC,QAAQ,UAAY,EACzCgG,EAAcjG,aAAaC,QAAQ,gBAAkB,EAF7C,4CAGd,WAA4Bb,EAAQ4G,GAApC,2BAAA3C,EAAA,sEACqBW,EAAGb,aAAa/D,EAAQ4G,GAD7C,OACQE,EADR,OAEQC,EAFR,YAEsBD,GACdE,EAAe,GACZ7B,EAAQ,EAJnB,YAIsBA,EAAQ4B,EAAQvH,QAJtC,wBAKUyH,EAAc,GACdC,EAAWH,EAAQ5B,GAN7B,UAOwBP,EAAGhB,YAAYsD,GAPvC,QAOU/C,EAPV,OAQI8C,EAAYxI,GAAKyI,EACjBD,EAAY9C,MAAQA,EACpB6C,EAAaR,KAAKS,GAVtB,QAI8C9B,IAJ9C,uBAaEc,EACEe,EAAatB,KAAI,SAACoB,GAChB,MAAO,CAAErI,GAAIqI,EAAKrI,GAAI0F,MAAO2C,EAAK3C,WAGtCvD,aAAaU,QAAQ,cAAeN,SAAS6F,EAAa,IAAM,GAChET,EAASpF,SAAS6F,EAAa,KAC/B3F,QAAQC,IAAI2F,GApBd,6CAHc,6DAyBdK,CAAavC,EAAG7E,OAAQC,EAAQ4G,KAC/B,CAACV,IAGF,sBAAKpI,UAAU,OAAf,UACGkI,EAAQN,KAAI,SAACgB,GAEZ,OACE,sBAAKjI,GAAIiI,EAAIjI,GAAb,UACE,qBACEX,UAAU,cACVY,IAAKC,EACLC,IAAI,QACJC,MAAM,KACNC,OAAO,KACPC,QAASiD,IAEX,cAAC,EAAD,CAAQvD,GAAIiI,EAAIjI,GAAiB0F,MAAOuC,EAAIvC,OAAnBuC,EAAIjI,MATTiI,EAAIjI,OAa9B,qBAAKX,UAAU,aAAf,SACE,cAAC,EAAD,CAAY8E,IAAK2D,KADcD,OCjExBc,EAdH,WACV,IAAMpH,EAAS,SADC,4CAEhB,sBAAAiE,EAAA,sEACQW,EAAG7E,OAAOC,EAAQ,GAD1B,4CAFgB,sBAMhB,OANgB,mCAKhBD,GAEE,sBAAKjC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCJSuJ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a2bddd77.chunk.js","sourcesContent":["// import idb from \"./indexedDB\";\nlet db;\n\nconst idb = {\n  InitDB(dbName, ver) {\n    const dbObject =\n      window.indexedDB ||\n      window.mozIndexedDB ||\n      window.webkitIndexedDB ||\n      window.msIndexedDB;\n\n    return new Promise(function (resolve, reject) {\n      let version = ver;\n      if (localStorage.getItem(\"dbVer\") != null) {\n        version = localStorage.getItem(\"dbVer\");\n      }\n      const request = dbObject.open(dbName, parseInt(version, 10));\n      request.onerror = (e) => {\n        console.log(`Error opening database:${e}`);\n        reject(e);\n      };\n      request.onsuccess = (e) => {\n        db = request.result;\n        localStorage.setItem(\"dbVer\", version);\n        console.log(`Database successfully opened : ${e}`);\n        resolve();\n      };\n    });\n  },\n  createListStore(dbName, ObjectStoreName, isAutoIncrement = true) {\n    const dbObject =\n      window.indexedDB ||\n      window.mozIndexedDB ||\n      window.webkitIndexedDB ||\n      window.msIndexedDB;\n    const curVer = localStorage.getItem(\"dbVer\");\n    return new Promise(function (resolve, reject) {\n      if (db) db.close();\n      const request = dbObject.open(dbName, parseInt(curVer, 10) + 1);\n      request.onerror = (e) => {\n        localStorage.setItem(\"dbVer\", db.version);\n        console.log(e);\n      };\n      request.onsuccess = (e) => {\n        db = request.result;\n        localStorage.setItem(\"dbVer\", db.version);\n        resolve(true);\n      };\n      request.onupgradeneeded = (e) => {\n        db = e.target.result;\n        if (isAutoIncrement === true) {\n          db.createObjectStore(ObjectStoreName, { autoIncrement: true });\n        } else {\n          db.createObjectStore(ObjectStoreName, { keyPath: \"id\" });\n        }\n\n        localStorage.setItem(\"dbVer\", db.version);\n        resolve();\n      };\n    });\n  },\n  deleteList(dbName, ObjectStoreName) {\n    const dbObject =\n      window.indexedDB ||\n      window.mozIndexedDB ||\n      window.webkitIndexedDB ||\n      window.msIndexedDB;\n    const curVer = localStorage.getItem(\"dbVer\");\n    return new Promise(function (resolve, reject) {\n      if (db.objectStoreNames.contains(ObjectStoreName) === false)\n        reject(new Error(\"ObjectStoreName not found.\"));\n      db.close();\n      const request = dbObject.open(dbName, parseInt(curVer, 10) + 1);\n      request.onerror = (e) => {\n        localStorage.setItem(\"dbVer\", parseInt(curVer, 10) + 1);\n        reject(new Error(e));\n        console.log(e);\n      };\n      request.onsuccess = (e) => {\n        db = request.result;\n        localStorage.setItem(\"dbVer\", parseInt(curVer, 10) + 1);\n        resolve(true);\n      };\n      request.onupgradeneeded = (e) => {\n        console.log(\"inside onupgrade\");\n        db = e.target.result;\n        //   localStorage.setItem(\"dbVer\", parseInt(curVer) + 1);\n        db.deleteObjectStore(ObjectStoreName);\n        resolve();\n      };\n    });\n  },\n  addCard(ObjectStoreName, dataObject, primaryKey = \"\", valueKey = \"data\") {\n    return new Promise(function (resolve, reject) {\n      if (db.objectStoreNames.contains(ObjectStoreName)) {\n        try {\n          const tx = db.transaction(ObjectStoreName, \"readwrite\");\n          const store = tx.objectStore(ObjectStoreName);\n          if (primaryKey === \"\") {\n            store.add({ [valueKey]: dataObject });\n          } else {\n            store.add({ id: primaryKey, [valueKey]: dataObject });\n          }\n          tx.oncomplete = () => {\n            console.log(\"Insert operation completed !\");\n            resolve();\n          };\n        } catch (error) {\n          console.log(\" error in insert operation \" + error);\n          reject(error);\n        }\n      } else {\n        console.log(\"ObjectStoreName not found\");\n        reject(\"ObjectStoreName not found\");\n      }\n    });\n  },\n  updateCard(ObjectStoreName, primaryKey, appendObj, appendKey = \"\") {\n    return new Promise(function (resolve, reject) {\n      const transaction = db.transaction(ObjectStoreName, \"readwrite\");\n      const objectStore = transaction.objectStore(ObjectStoreName);\n      const req = objectStore.get(primaryKey);\n      req.onsuccess = function (event) {\n        try {\n          const data = event.target.result;\n          let finalData = {};\n          let KeyForAppendObj;\n          if (appendKey == \"\") {\n            // KeyForAppendObj = Object.keys(appendObj)[0];\n            let temp = Object.assign(data.data, appendObj);\n            finalData.id = data.id;\n            finalData.data = temp;\n            // data[KeyForAppendObj] = appendObj[KeyForAppendObj];\n          } else {\n            KeyForAppendObj = appendKey;\n            data[KeyForAppendObj] = appendObj;\n          }\n          const requestUpdate = objectStore.put(finalData);\n          requestUpdate.onsuccess = (e) => {\n            console.log(` success in update ${e}`);\n            resolve();\n          };\n          requestUpdate.onerror = (e) => {\n            console.log(`error in update ${e}`);\n            reject(e);\n          };\n        } catch (error) {\n          console.log(\"error in update operation: \" + error);\n          reject(error);\n        }\n      };\n      req.onerror = function (e) {\n        console.log(\"error in update operation: \" + e);\n      };\n    });\n  },\n  getAllCards(ObjectStoreName) {\n    return new Promise(function (resolve, reject) {\n      const tx = db.transaction(ObjectStoreName);\n      const currentObjectStore = tx.objectStore(ObjectStoreName);\n      const req = currentObjectStore.getAll();\n      req.onsuccess = function (event) {\n        try {\n          const data = event.target.result;\n          resolve(data);\n        } catch (error) {\n          console.log(\"error in read operation: \" + error);\n        }\n      };\n    });\n  },\n  deleteCard(ObjectStoreName, primaryKey) {\n    return new Promise(function (resolve) {\n      const tx = db.transaction(ObjectStoreName, \"readwrite\");\n      const store = tx.objectStore(ObjectStoreName).delete(primaryKey); // 1 is \"keyPathId\" here for row no. in the store\n      tx.oncomplete = (e) => {\n        console.log(`deleted successfully ${e}`);\n        resolve();\n      };\n    });\n  },\n  readAllLists(init, dbName, ver) {\n    return new Promise(async function (resolve, reject) {\n      await init(dbName, ver);\n      resolve(db.objectStoreNames);\n    });\n  },\n};\nexport default idb;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst Header = (props) => {\n  return (\n    <div className=\"header\">\n      <hr />\n      <h2>Trello Board</h2>\n      <hr />\n    </div>\n  );\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/cancel.08079bda.svg\";","import React, { useState } from \"react\";\nimport \"../App.css\";\nimport cross from \"../cancel.svg\";\nconst Card = (props) => {\n  const [title, setTitle] = useState(props.title || \"\");\n  const [text, setText] = useState(props.text || \"\");\n  const [buttonText, setButtonText] = useState(props.buttonText || \"\");\n  const { deleteCard, addCard } = props;\n  const handleOnchangeTitle = (e) => {\n    setTitle(e.target.value);\n  };\n  const handleOnchangeText = (e) => {\n    setText(e.target.value);\n  };\n  const handleEmpty = () => {\n    if (title.length === 0) return false;\n    return true;\n  };\n  return (\n    <div className=\"card\" id={props.id}>\n      <img\n        className=\"cross\"\n        src={cross}\n        alt=\"cross\"\n        width=\"50\"\n        height=\"15\"\n        onClick={deleteCard}\n      />\n      <input\n        type=\"text\"\n        id={`title_${props.id}`}\n        placeholder=\"Title\"\n        value={title}\n        onChange={handleOnchangeTitle}\n      />\n      <textarea\n        placeholder=\"Type anything\"\n        id={`text_${props.id}`}\n        rows={5}\n        cols={10}\n        value={text}\n        onChange={handleOnchangeText}\n      />\n      <button\n        onClick={(e) => {\n          if (!handleEmpty()) {\n            e.preventDefault();\n            alert(\"Please Enter Title atleast\");\n          } else {\n            setButtonText(\"Update\");\n            addCard(e, title, text, buttonText);\n          }\n        }}\n      >\n        {buttonText || \"Save\"}\n      </button>\n    </div>\n  );\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/plus.d5048b9a.svg\";","import React from \"react\";\nimport \"../App.css\";\nimport PlusLogo from \"../plus.svg\";\nconst AddCardIcon = (props) => {\n  const { addCard } = props;\n  return (\n    <div className=\"AddCardIcon\">\n      <img\n        style={{ \"marginLeft\": \"10%\" }}\n        src={PlusLogo}\n        alt=\"plusLogo\"\n        width=\"60\"\n        height=\"100\"\n        onClick={addCard}\n      />\n    </div>\n  );\n};\n\nexport default AddCardIcon;\n","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Card from \"./Card\";\nimport AddCardIcon from \"./AddCardIcon\";\n// import idb from \"indexed-db-lite\";\nimport Db from \"./LocalDb\";\n// import _ from \"lodash\";\nconst Column = (props) => {\n  // const [cards, setCards] = useState(props.cards || []);\n  const [cardDetails, setCardDetails] = useState(props.cards || []);\n\n  const cardId = [];\n  const dbName = \"trello\";\n\n  const addNewCard = async (e) => {\n    const curId = cardDetails.length + 1;\n    setCardDetails([...cardDetails, { id: curId.toString() }]);\n  };\n\n  const saveCard = async (e, title, text, buttonText) => {\n    const curId = e.target.parentElement.id;\n    const parentId = e.target.parentElement.parentElement.parentElement.id;\n    if (buttonText === \"Update\") {\n      await Db.updateCard(parentId, curId.toString(), {\n        title: title,\n        text: text,\n      });\n    } else\n      await Db.addCard(\n        parentId,\n        { title: title, text: text, create_tm: new Date().getTime() },\n        curId.toString()\n      );\n    let cardIndex = -1;\n    cardDetails.forEach((card, index) => {\n      if (card.id == curId.toString()) cardIndex = index;\n    });\n    if (cardIndex >= 0)\n      cardDetails[cardIndex] = {\n        id: curId.toString(),\n        data: {\n          title: title,\n          text: text,\n          create_tm: new Date().getTime(),\n        },\n      };\n\n    setCardDetails(cardDetails);\n  };\n\n  const deleteCard = async (e) => {\n    const parentId = e.target.parentElement.parentElement.parentElement.id;\n    const cardId = e.target.parentElement.id;\n    const newCards = cardDetails.filter((card) => {\n      console.log(card.id, cardId);\n      return card.id != cardId;\n    });\n    const sortedCards = newCards.sort((a, b) => {\n      return b?.data?.create_tm - a?.data?.create_tm;\n    });\n    setCardDetails(sortedCards);\n    await Db.deleteCard(parentId, cardId);\n  };\n\n  return (\n    <div className=\"column\">\n      {cardDetails.map((card) => {\n        const id = card.id;\n        let buttonTitle = \"Save\";\n        if (card?.data?.title?.length > 0) buttonTitle = \"Update\";\n        return (\n          <Card\n            id={id}\n            deleteCard={deleteCard}\n            key={id}\n            addCard={saveCard}\n            title={card?.data?.title}\n            text={card?.data?.text}\n            buttonText={buttonTitle}\n          />\n        );\n      })}\n      <AddCardIcon addCard={addNewCard} />\n    </div>\n  );\n};\n\nexport default Column;\n","export default __webpack_public_path__ + \"static/media/reminders.e81f9a98.svg\";","import React from \"react\";\nimport \"../App.css\";\nimport PlusLogo from \"../reminders.svg\";\n\nconst AddListIcon = (props) => {\n  const { add } = props;\n  return (\n    <div>\n      <img\n        style={{ marginLeft: \"80%\", marginTop: \"70%\" }}\n        src={PlusLogo}\n        alt=\"plusLogo\"\n        width=\"100\"\n        height=\"80\"\n        onClick={add}\n      />\n    </div>\n  );\n};\n\nexport default AddListIcon;\n","import React, { useEffect, useState } from \"react\";\nimport \"../App.css\";\nimport Column from \"./Column\";\nimport AddNewList from \"./AddListIcon\";\nimport cross from \"../cancel.svg\";\n// import idb from \"indexed-db-lite\"; This is my own npm package.\nimport Db from \"./LocalDb\";\n\nconst GridColumn = () => {\n  const [columns, setColumns] = useState([]);\n  const [load, setLoad] = useState(0);\n  const [colId, setColId] = useState(1);\n  const columnId = [];\n  let idCounter = colId;\n  const dbName = \"trello\";\n\n  const appendNewList = async () => {\n    idCounter = colId + 1;\n    setColumns([...columns, { id: idCounter }]);\n    columnId.push(idCounter);\n    await Db.createListStore(dbName, idCounter, false);\n    setColId(idCounter + 1);\n    localStorage.setItem(\"listCounter\", parseInt(idCounter, 10) + 1);\n  };\n\n  const deleteList = async (e) => {\n    const columnId = e.target.parentElement.id;\n    // let colIndex = -1;\n    // columns.forEach((col, index) => {\n    //   if (col.id == columnId) colIndex = index;\n    // });\n    const newCols = columns.filter((col) => col.id != columnId);\n    // const newCols = [\n    //   ...columns.slice(0, colIndex),\n    //   ...columns.slice(colIndex + 1),\n    // ];\n    setColumns(newCols);\n    // if (colIndex !== -1) {\n    await Db.deleteList(dbName, columnId);\n  };\n  useEffect(() => {\n    const dbVer = localStorage.getItem(\"dbVer\") || 1;\n    const listCounter = localStorage.getItem(\"listCounter\") || 1;\n    async function readEntireDb(dbName, dbVer) {\n      const list = await Db.readAllLists(dbName, dbVer);\n      const listArr = [...list];\n      const finalListObj = [];\n      for (let index = 0; index < listArr.length; index++) {\n        const listCardObj = {};\n        const listName = listArr[index];\n        const cards = await Db.getAllCards(listName);\n        listCardObj.id = listName;\n        listCardObj.cards = cards;\n        finalListObj.push(listCardObj);\n      }\n\n      setColumns(\n        finalListObj.map((list) => {\n          return { id: list.id, cards: list.cards };\n        })\n      );\n      localStorage.setItem(\"listCounter\", parseInt(listCounter, 10) + 1);\n      setColId(parseInt(listCounter, 10));\n      console.log(list);\n    }\n    readEntireDb(Db.InitDB, dbName, dbVer);\n  }, [load]);\n\n  return (\n    <div className=\"grid\">\n      {columns.map((col) => {\n        // console.log(col);\n        return (\n          <div id={col.id} key={col.id}>\n            <img\n              className=\"crossColumn\"\n              src={cross}\n              alt=\"cross\"\n              width=\"50\"\n              height=\"20\"\n              onClick={deleteList}\n            />\n            <Column id={col.id} key={col.id} cards={col.cards} />\n          </div>\n        );\n      })}\n      <div className=\"addNewList\" key={idCounter}>\n        <AddNewList add={appendNewList} />\n      </div>\n    </div>\n  );\n};\n\nexport default GridColumn;\n","import \"./App.css\";\nimport Header from \"./Components/Header\";\nimport GridColumn from \"./Components/GridColumn\";\nimport React from \"react\";\nimport AddNewList from \"./Components/AddListIcon\";\nimport Db from \"./Components/LocalDb\";\n\nconst App = () => {\n  const dbName = \"trello\";\n  async function InitDB() {\n    await Db.InitDB(dbName, 1);\n  }\n  InitDB();\n  return (\n    <div className=\"app\">\n      <Header />\n      <GridColumn />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}